[{"type":"String","value":"'use strict'"},{"type":"Punctuator","value":";"},{"type":"Identifier","value":"module"},{"type":"Punctuator","value":"."},{"type":"Identifier","value":"exports"},{"type":"Punctuator","value":"="},{"type":"Keyword","value":"function"},{"type":"Identifier","value":"createNoopServiceWorkerMiddleware"},{"type":"Punctuator","value":"("},{"type":"Punctuator","value":")"},{"type":"Punctuator","value":"{"},{"type":"Keyword","value":"return"},{"type":"Keyword","value":"function"},{"type":"Identifier","value":"noopServiceWorkerMiddleware"},{"type":"Punctuator","value":"("},{"type":"Identifier","value":"req"},{"type":"Punctuator","value":","},{"type":"Identifier","value":"res"},{"type":"Punctuator","value":","},{"type":"Identifier","value":"next"},{"type":"Punctuator","value":")"},{"type":"Punctuator","value":"{"},{"type":"Keyword","value":"if"},{"type":"Punctuator","value":"("},{"type":"Identifier","value":"req"},{"type":"Punctuator","value":"."},{"type":"Identifier","value":"url"},{"type":"Punctuator","value":"==="},{"type":"String","value":"'/service-worker.js'"},{"type":"Punctuator","value":")"},{"type":"Punctuator","value":"{"},{"type":"Identifier","value":"res"},{"type":"Punctuator","value":"."},{"type":"Identifier","value":"setHeader"},{"type":"Punctuator","value":"("},{"type":"String","value":"'Content-Type'"},{"type":"Punctuator","value":","},{"type":"String","value":"'text/javascript'"},{"type":"Punctuator","value":")"},{"type":"Punctuator","value":";"},{"type":"Identifier","value":"res"},{"type":"Punctuator","value":"."},{"type":"Identifier","value":"send"},{"type":"Punctuator","value":"("},{"type":"Template","value":"`// This service worker file is effectively a 'no-op' that will reset any\n// previous service worker registered for the same host:port combination.\n// In the production build, this file is replaced with an actual service worker\n// file that will precache your site's local assets.\n// See https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n\nself.addEventListener('install', () => self.skipWaiting());\n\nself.addEventListener('activate', () => {\n  self.clients.matchAll({ type: 'window' }).then(windowClients => {\n    for (let windowClient of windowClients) {\n      // Force open pages to refresh, so that they have a chance to load the\n      // fresh navigation response from the local dev server.\n      windowClient.navigate(windowClient.url);\n    }\n  });\n});\n`"},{"type":"Punctuator","value":")"},{"type":"Punctuator","value":";"},{"type":"Punctuator","value":"}"},{"type":"Keyword","value":"else"},{"type":"Punctuator","value":"{"},{"type":"Identifier","value":"next"},{"type":"Punctuator","value":"("},{"type":"Punctuator","value":")"},{"type":"Punctuator","value":";"},{"type":"Punctuator","value":"}"},{"type":"Punctuator","value":"}"},{"type":"Punctuator","value":";"},{"type":"Punctuator","value":"}"},{"type":"Punctuator","value":";"}]